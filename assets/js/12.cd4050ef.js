(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{657:function(n,s,e){"use strict";e.r(s);var a=e(5),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("Boxx",{attrs:{blockStyle:n.blockStyle}}),n._v(" "),e("h2",{attrs:{id:"目的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目的"}},[n._v("#")]),n._v(" 目的")]),n._v(" "),e("p",[n._v("本文档旨在帮助新接触 TypeScript 的开发人员，能够快速了解 TypeScript 中的类型定义语法。")]),n._v(" "),e("p",[n._v("想了解更多，可以查看 TypeScript 官方文档手册：https://www.tslang.cn/docs/handbook/basic-types.html")]),n._v(" "),e("p",[n._v("愿你有一段愉快的 TypeScript 开发体验。")]),n._v(" "),e("h2",{attrs:{id:"类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[n._v("#")]),n._v(" 类型")]),n._v(" "),e("p",[n._v("注：这里所说的基础类型与复杂类型，是基于 JavaScript 的原始类型与复杂类型来区分的，并非 TypeScript 文档中所说的基础类型")]),n._v(" "),e("h3",{attrs:{id:"基础类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[n._v("#")]),n._v(" 基础类型")]),n._v(" "),e("p",[n._v("TypeScript 是 JavaScript 的一个超集，那么在 TypeScript 中的类型基本与 JavaScript 相同。")]),n._v(" "),e("p",[n._v("在 TypeScript 中主要有这几种基础类型："),e("code",[n._v("number")]),n._v(", "),e("code",[n._v("string")]),n._v(", "),e("code",[n._v("boolean")]),n._v(", "),e("code",[n._v("symbol")]),n._v(", "),e("code",[n._v("bigint")]),n._v("。")]),n._v(" "),e("p",[n._v("分别对应 JavaScript 中的 "),e("code",[n._v("Number")]),n._v(", "),e("code",[n._v("String")]),n._v(", "),e("code",[n._v("Boolean")]),n._v(", "),e("code",[n._v("Symbol")]),n._v(" 和 "),e("code",[n._v("BigInt")]),n._v("。")]),n._v(" "),e("p",[n._v("注意大小写哦")]),n._v(" "),e("h3",{attrs:{id:"复杂类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复杂类型"}},[n._v("#")]),n._v(" 复杂类型")]),n._v(" "),e("p",[n._v("除去基础类型之外，更复杂的是其他的对应于 JavaScript 的 "),e("code",[n._v("Object")]),n._v(", "),e("code",[n._v("Array")]),n._v(" 与 "),e("code",[n._v("Function")]),n._v(" 的类型。")]),n._v(" "),e("p",[n._v("比如: "),e("code",[n._v("object")]),n._v(", "),e("code",[n._v("enum枚举")]),n._v(", "),e("code",[n._v("Array<T>")]),n._v(", "),e("code",[n._v("ArrayLike<T>")]),n._v(", "),e("code",[n._v("Tuple元组")]),n._v(", "),e("code",[n._v("Function")]),n._v(" 等等，类型有很多，先不用太过关注这里列举出来的东西。")]),n._v(" "),e("ul",[e("li",[n._v("enum 枚举是什么？")])]),n._v(" "),e("p",[n._v("类似其他一些强类型编程语言中的枚举，当你想要一种类型，它只有有限的一些固定值时，就可以使用枚举类型。")]),n._v(" "),e("p",[n._v("它就相当于一个常量对象，内部存储了指定的有限个常量值。")]),n._v(" "),e("p",[n._v("这个类型的变量的值，只能是这些有限常量中的一个，不可能是其他任何值。")]),n._v(" "),e("p",[n._v("比如在不考虑一些特别的情况时，在我们的常识下，人类的性别只有两种：男性 和 女性。")]),n._v(" "),e("p",[n._v("此时就可以将性别作为一个枚举值来声明。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface IPerson {\n  name: string;\n  age: number;\n  gender: Gender;\n}\n\nenum Gender {\n  female = 0,\n  male = 1\n}\n\nlet w: IPerson = {\n  name: 'w',\n  age: 18,\n  gender: Gender.male\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("你可能发现了，除了将声明的枚举类型作为类型定义来使用以外，这里还把它作为一个值来使用了。")]),n._v(" "),e("p",[n._v("在 TypeScript 中，enum 关键字，除了会产生一个枚举类型定义以外，还会被编译成一个 JavaScript 对象，它是可以在代码中作为一个值来使用的。")]),n._v(" "),e("ul",[e("li",[n._v("Tuple 元组是什么？")])]),n._v(" "),e("p",[n._v("TypeScript 中除了普通的数组类型外，还存在一种特殊的数组类型，元组。")]),n._v(" "),e("p",[n._v("用简单形象一点的说明，元组就是固定长度的数组。在这个定长数组中，可以给它的每一项来声明一个类型。")]),n._v(" "),e("p",[n._v("比如有一个长度为 2 的数组，它的第一项是数字，第二项是字符串。那么就可以把它声明为一个元组。")]),n._v(" "),e("p",[e("code",[n._v("let tuple: [number, string] = [1, 'text'];")])]),n._v(" "),e("h3",{attrs:{id:"空值类型与-any-类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空值类型与-any-类型"}},[n._v("#")]),n._v(" 空值类型与 any 类型")]),n._v(" "),e("p",[n._v("在 TypeScript 中有那么几个比较特殊的类型："),e("code",[n._v("void")]),n._v(", "),e("code",[n._v("null")]),n._v(" 和 "),e("code",[n._v("never")]),n._v("。")]),n._v(" "),e("p",[n._v("它们都是空值类型，但是也有一些区别。")]),n._v(" "),e("p",[e("code",[n._v("void")]),n._v(": 表示未定义，可以对应 JavaScript 中的 "),e("code",[n._v("undefined")]),n._v(" "),e("code",[n._v("null")]),n._v(": 从字面就可以理解，它就是对应着 JavaScript 中的空值 "),e("code",[n._v("null")]),n._v(" "),e("code",[n._v("never")]),n._v(": 它是用来声明一个变量绝对不会有值，或者一个函数绝对不会返回的。\n当给一个变量声明 "),e("code",[n._v("never")]),n._v(" 类型时，那么无论是什么值，即使是 "),e("code",[n._v("undefined")]),n._v(" 和 "),e("code",[n._v("null")]),n._v(" 也不能赋值给这个变量。\n同样的，如果给一个函数的返回类型声明为 "),e("code",[n._v("never")]),n._v("，就说明这个函数没有可访问的终结点，同时也就不能使用这个函数的返回值。\n如何理解函数没有可访问的终结点，也即没有返回值：要么这个函数固定会抛出异常；要么内部有一个死循环，一直不可能返回。")]),n._v(" "),e("p",[n._v("除了上面几个空值类型外，TypeScript 还有一个特殊的类型: "),e("code",[n._v("any")]),n._v(" 。")]),n._v(" "),e("p",[n._v("这个类型其实就是不明确类型，说明该类型的值可能是任何类型，无法判断。这也是针对 JavaScript 的灵活性做出的应对。")]),n._v(" "),e("p",[n._v("在 JavaScript 中，即使一开始声明一个变量并赋值为数字，但是在其他地方，也可能会把这个变量改成字符串，布尔值，甚至是一个函数。")]),n._v(" "),e("p",[n._v("在这种情况下，自然就无法确定这个变量的类型到底是什么了，也就是 "),e("code",[n._v("any")]),n._v(" 类型。")]),n._v(" "),e("h2",{attrs:{id:"如何使用这些类型定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何使用这些类型定义"}},[n._v("#")]),n._v(" 如何使用这些类型定义？")]),n._v(" "),e("h3",{attrs:{id:"显式声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显式声明"}},[n._v("#")]),n._v(" 显式声明")]),n._v(" "),e("p",[n._v("在变量名称后面跟上冒号 "),e("code",[n._v(":")]),n._v(" 加类型来声明变量的类型。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let n: number = 1;\nlet str: string = 'Hello TS';\nlet bool: boolean = true;\nlet sym: symbol = Symbol('unique');\nlet bigNum: bigint = 996n;\n\nlet nums: number[] = [1, 2, 3, 4];\nlet fn: () => number = function fn() { return 1; }\n\ninterface IMonster {\n  race: string;\n  age: number;\n  gender: 'male' | 'female' | 'unknown';\n}\nconst yukari: IMonster = {\n  race: 'Interstice',\n  age: 17,\n  gender: 'female'\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])]),e("h3",{attrs:{id:"类型推断"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型推断"}},[n._v("#")]),n._v(" 类型推断")]),n._v(" "),e("p",[n._v("看了上面的示例，你可能会发出 “好麻烦啊~” 的感叹，但是实际项目中并不需要每个地方都这么显式的给每个变量注明类型。")]),n._v(" "),e("p",[n._v("TypeScript 是聪明的，它可以根据上下文来自行推断一个变量的类型。")]),n._v(" "),e("p",[n._v("举例来说，当我们给一个变量初始声明并赋值一个数字时，那么 TypeScript 就可以直接推断认为它是一个 "),e("code",[n._v("number")]),n._v(" 类型的数据，而不需要你再通过如上示例那样给变量标注 "),e("code",[n._v(": number")]),n._v(" 来告诉 TypeScript 它是一个数字。")]),n._v(" "),e("p",[n._v("所以在实际使用时，你尽可以这么来写：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let n = 1;\nlet str = 'Hello TS';\nlet bool = true;\nlet sym = Symbol('unique');\nlet bigNum = 996n;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("TypeScript 能够准确的推断出来它们各自的类型。")]),n._v(" "),e("p",[n._v("当然，如果一开始没有赋值，那么 TypeScript 自然也就无从推断，此时还是需要显式的注明类型的。")]),n._v(" "),e("p",[n._v("另一种情况是，在声明处赋予的值的类型并不明确，那么 TypeScript 也无法推断出具体的数据类型。")]),n._v(" "),e("h3",{attrs:{id:"类型断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[n._v("#")]),n._v(" 类型断言")]),n._v(" "),e("p",[n._v("在某些情况下，虽然 TypeScript 无法确定一个值的类型，但是我们能够确定它的类型时，")]),n._v(" "),e("p",[n._v("就可以通过类型断言的方式来告诉 TypeScript 编译器：“我很清楚自己在干什么，相信我，它在这里就是这个类型”。")]),n._v(" "),e("ul",[e("li",[n._v("类型断言的方式")])]),n._v(" "),e("p",[n._v("一种是在要断言的变量或表达式的后面加上 "),e("code",[n._v("as")]),n._v(" 关键字并跟上要断言的类型 ( "),e("code",[n._v("value as Type")]),n._v(" )。")]),n._v(" "),e("p",[n._v("另一种则是在要断言的变量或表达式的前面加上尖括号包裹的断言类型 ( "),e("code",[n._v("<Type>value")]),n._v(" )。")]),n._v(" "),e("p",[n._v("第三种是非空断言，留到下面空值保护中再讲。")]),n._v(" "),e("p",[n._v("我们推荐使用 "),e("code",[n._v("as")]),n._v(" 关键字，写法上更易理解。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("async function getNum(): number {\n  // 使用 as 关键字断言\n  const n = await request({...}) as number;\n  return n;\n}\n\nlet str: any = 'Hello TS';\n// 使用尖括号 <string> 断言\nlet [, name] = (<string>str).split(' ');\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("h2",{attrs:{id:"接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[n._v("#")]),n._v(" 接口")]),n._v(" "),e("p",[n._v("在自定义一些复杂的类型时，接口是经常被使用到的内容，是 TypeScript 类型定义中极为重要的组成部分。")]),n._v(" "),e("p",[n._v("在 TypeScript 中要定义一个对象类型，如果你使用类型 "),e("code",[n._v("object")]),n._v("，那么你只能得到一个非原始类型的数据类型定义。")]),n._v(" "),e("p",[n._v("要想更详细的定义一个对象内有哪些属性，哪些方法，这些属性和方法有分别有着怎样的类型，这时候你就需要了解 "),e("code",[n._v("interface")]),n._v(" 了。")]),n._v(" "),e("p",[n._v("你可能注意到，在上面的一些示例中，已经出现过它了。")]),n._v(" "),e("p",[n._v("比如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface IPerson {\n  name: string;\n  age: number;\n  gender: Gender;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("这段接口声明中，"),e("code",[n._v("interface")]),n._v(" 是接口声明的关键字，"),e("code",[n._v("IPerson")]),n._v(" 则是声明的接口的名字，后面的代码块中则是声明了这个接口内有哪些属性以及它们的类型。")]),n._v(" "),e("p",[e("code",[n._v("IPerson")]),n._v(" 接口有三个属性，"),e("code",[n._v("string")]),n._v(" 类型的 "),e("code",[n._v("name")]),n._v(" 属性、"),e("code",[n._v("number")]),n._v(" 类型的 "),e("code",[n._v("age")]),n._v(" 属性，"),e("code",[n._v("Gender")]),n._v(" 枚举类型的 "),e("code",[n._v("gender")]),n._v(" 属性。")]),n._v(" "),e("p",[n._v("当我们以接口 "),e("code",[n._v("IPerson")]),n._v(" 为类型声明一个对象时，它就必须包含上述三个属性，且值要符合其各自的类型。")]),n._v(" "),e("h3",{attrs:{id:"可选属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可选属性"}},[n._v("#")]),n._v(" 可选属性")]),n._v(" "),e("p",[n._v("并非所有的属性，在接口中都是必需的。有些属性可能一开始并不存在，或者只在某些特定条件下才会有。")]),n._v(" "),e("p",[n._v("这时候，就可以把它作为可选属性来声明。")]),n._v(" "),e("p",[n._v("只需要在正常的接口声明中，找到要设置为可选的属性，在属性名与冒号之间添加一个问号即可。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface ISquareConfig {\n  color?: string;\n  width?: number;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("h3",{attrs:{id:"只读属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#只读属性"}},[n._v("#")]),n._v(" 只读属性")]),n._v(" "),e("p",[n._v("有些属性可能只在初始化时设置一个值，在后面就不可修改了，这时就可以通过 "),e("code",[n._v("readonly")]),n._v(" 关键字来设置其为只读属性。")]),n._v(" "),e("p",[n._v("只读属性只可访问，不可修改。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface IPoint {\n  readonly x: number;\n  readonly y: number;\n}\n\nconst p: IPoint = {\n  x: 1,\n  y: 1\n};\n// 错误，只读属性不可修改\np.x = 10;\n\n// TypeScript 中有一个 ReadonlyArray<T> 的类型，类似 Array<T>\n// 只是将数组中的可变方法去掉了，以此来确保数组被创建后，不可更改\nconst arr: ReadonlyArray<number> = [1, 2];\narr.splice(1, 1); // 错误\narr.push(3); // 错误\narr[0] = 10; // 错误\narr.length = 5; // 错误\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br")])]),e("h3",{attrs:{id:"函数类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[n._v("#")]),n._v(" 函数类型")]),n._v(" "),e("p",[n._v("接口能够描述 JavaScript 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。")]),n._v(" "),e("p",[n._v("为了使用接口表示函数类型，我们需要给接口定义一个调用签名。")]),n._v(" "),e("p",[n._v("它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface SearchFunc {\n  (source: string, subString: string): boolean;\n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string) {\n  let result = source.search(subString);\n  return result > -1;\n}\n#\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("h3",{attrs:{id:"可索引的类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可索引的类型"}},[n._v("#")]),n._v(" 可索引的类型")]),n._v(" "),e("p",[n._v('与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如 a[10]或 ageMap["daniel"]。')]),n._v(" "),e("p",[n._v("可索引类型具有一个   索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。")]),n._v(" "),e("p",[n._v("让我们看一个例子：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('interface StringArray {\n  [index: number]: string;\n}\n\nlet myArray: StringArray;\nmyArray = ["Bob", "Fred"];\n\nlet myStr: string = myArray[0];\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("TypeScript 支持两种索引签名：字符串和数字。")]),n._v(" "),e("p",[n._v("可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。")]),n._v(" "),e("p",[n._v("这是因为当使用  number 来索引时，JavaScript 会将它转换成 string 然后再去索引对象。")]),n._v(" "),e("p",[n._v('也就是说用  100（一个 number）去索引等同于使用"100"（一个 string）去索引，因此两者需要保持一致。')]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class Animal {\n  name: string;\n}\nclass Dog extends Animal {\n  breed: string;\n}\n\n// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!\ninterface NotOkay {\n  [x: number]: Animal;\n  [x: string]: Dog;\n}\n\ninterface NumberDictionary {\n  [index: string]: number;\n  length: number;    // 可以，length是number类型\n  name: string       // 错误，`name`的类型与索引类型返回值的类型不匹配\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br")])]),e("p",[n._v("最后，你可以将索引签名设置为只读，这样就防止了给索引赋值：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('interface ReadonlyStringArray {\n    readonly [index: number]: string;\n}\nlet myArray: ReadonlyStringArray = ["Alice", "Bob"];\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("p",[n._v("// 你不能设置 myArray[2]，因为索引签名是只读的。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('myArray[2] = "Mallory";\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("h3",{attrs:{id:"接口的继承与实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口的继承与实现"}},[n._v("#")]),n._v(" 接口的继承与实现")]),n._v(" "),e("p",[n._v("在 TypeScript 中，我们可以通过 "),e("code",[n._v("extends")]),n._v(" 继承一个接口来创建它的子类型；")]),n._v(" "),e("p",[n._v("也可以强制一个类按照某个接口定义的描述来实现它，使用 "),e("code",[n._v("implements")]),n._v(" 来实现一个接口。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface IClock {\n  currentTime: Date;\n  setTime(d: Date);\n}\n\ninterface IAlarmClock extends IClock {\n  knock();\n}\n\nclass Clock implements IClock {\n  currentTime: Date;\n  setTime(d: Date) {\n    this.currentTime = d;\n  }\n  constructor(h: number, m: number) { }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。")]),n._v(" "),e("p",[n._v("当一个类实现了一个接口时，只对其实例部分进行类型检查，而不会检查静态部分。")]),n._v(" "),e("h2",{attrs:{id:"高级技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级技巧"}},[n._v("#")]),n._v(" 高级技巧")]),n._v(" "),e("h3",{attrs:{id:"联合类型与交叉类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联合类型与交叉类型"}},[n._v("#")]),n._v(" 联合类型与交叉类型")]),n._v(" "),e("p",[n._v("就像上面介绍 "),e("code",[n._v("any")]),n._v(" 类型时所说，有时一个变量可能不止一种类型，比如一个网络请求的返回数据，当服务能查到数据时，会返回一个数值类型的状态码，可是如果服务查询出错了，那就只能返回 null 了。")]),n._v(" "),e("p",[n._v("这种情况下，要怎么声明它既可能是一个数字，又可能是一个空值呢？")]),n._v(" "),e("p",[n._v("TypeScript 有提供一种联合类型: "),e("code",[n._v("A | B")]),n._v(" 。")]),n._v(" "),e("p",[n._v("联合类型表示一个值可以是几种类型之一，用竖线( "),e("code",[n._v("|")]),n._v(" )分隔每个类型。所以  "),e("code",[n._v("number | null")]),n._v("  表示一个值可以是  number  或  null。")]),n._v(" "),e("p",[n._v("因此要声明刚刚所说的状态码的类型，就可以这样来写：")]),n._v(" "),e("p",[n._v("// status 可能是数值类型，或者是 null")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let status: number | null;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("如果一个值是联合类型，它只能访问此联合类型的所有类型里共有的成员。")]),n._v(" "),e("p",[n._v("就像这个状态码，因为 "),e("code",[n._v("null")]),n._v(" 没有任何属性或方法，所以直接调用 "),e("code",[n._v("number")]),n._v(" 的方法是会报错的，必须先区分出两个类型。")]),n._v(" "),e("p",[n._v("这一点可以到下面的   类型保护与区分类型   一节了解。")]),n._v(" "),e("p",[n._v("另一种情况恰好相反，某个变量是多种类型的集合，它可能同时包含有类型 A 和类型 B。")]),n._v(" "),e("p",[n._v("这时你需要的是交叉类型: "),e("code",[n._v("A & B")]),n._v("。")]),n._v(" "),e("p",[n._v("交叉类型类似联合类型，只是分隔符号是 "),e("code",[n._v("&")]),n._v("。")]),n._v(" "),e("p",[n._v("与联合类型相反，交叉类型是同时包含多个类型，因此它可以访问包含的任何类型的任何成员。")]),n._v(" "),e("p",[n._v("// 既有通用区域信息，又包含热门区域信息")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let area: ICommonArea & IHotArea;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("h3",{attrs:{id:"字面量类型与类型别名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字面量类型与类型别名"}},[n._v("#")]),n._v(" 字面量类型与类型别名")]),n._v(" "),e("p",[n._v("在 TypeScript 中除了使用特定的类型关键字以外，还可以使用字面量作为类型，以此表示常量类型。就像上面介绍枚举类型时所做的那样。")]),n._v(" "),e("p",[n._v("而这种字面量类型在实际使用场景中，通常都是多个字面量的联合类型。")]),n._v(" "),e("p",[n._v("比如：")]),n._v(" "),e("p",[n._v("// 使用字面量联合类型，达到枚举类型的效果")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let gender: 'male' | 'female' = 'male';\n\nlet privilege: 0 | 1 | 2 | 4 | 8 | 16 = 0;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("如果联合类型的数量比较多，又可能在多个地方使用的话，每次都写一长串的联合类型，是不是很烦恼？即使可以复制粘贴，也希望有一个更好的方式？")]),n._v(" "),e("p",[n._v("TypeScript 有提供一个声明类型别名的关键字 "),e("code",[n._v("type")]),n._v("，可以使用它来声明一个类型别名，使用这个别名来代替它的实际类型。")]),n._v(" "),e("p",[n._v("当然，类型别名并不只是用来给联合类型使用的，你也可以给一些特定的类型组合一个语义化别名，或者给一个自定义的函数类型加上语义化别名。")]),n._v(" "),e("p",[n._v("此外也可以使用类型别名("),e("code",[n._v("type")]),n._v(")来实现一个类似于接口 ("),e("code",[n._v("interface")]),n._v(")的类型。")]),n._v(" "),e("p",[n._v("比如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("type IPrivilege = 0 | 1 | 2 | 4 | 8 | 16;\nlet privilege: IPrivilege = 4;\n\ntype IGetName = () => string;\n\ntype IPerson = {\n  name: string;\n  age: number;\n  gender: Gender;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("ul",[e("li",[n._v("类型别名注意点")])]),n._v(" "),e("p",[n._v("起别名不会新建一个类型 - 它创建了一个新   名字来引用那个类型。 给原始类型起别名通常没什么用，尽管可以做为文档的一种形式使用。\n类型别名不能被  extends 和  implements（自己也不能  extends 和  implements 其它类型）。\n因为   软件中的对象应该对于扩展是开放的，但是对于修改是封闭的，你应该尽量去使用接口代替类型别名。\n你可能会发现，即使去 "),e("code",[n._v("extends")]),n._v(" 一个 "),e("code",[n._v("type")]),n._v("，一些开发工具也并不会对此报错，但是依然不建议这么使用。\n另一方面，如果你无法通过接口来描述一个类型并且需要使用联合类型或元组类型，这时通常会使用类型别名。")]),n._v(" "),e("h3",{attrs:{id:"类型保护与区分类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型保护与区分类型"}},[n._v("#")]),n._v(" 类型保护与区分类型")]),n._v(" "),e("p",[n._v("联合类型适合于那些值可以为不同类型的情况。 但当我们想确切地了解它是否是某个特定类型时怎么办？")]),n._v(" "),e("p",[n._v("JavaScript 里常用来区分 2 个可能值的方法是检查成员是否存在。 如之前提及的，我们只能访问联合类型中共同拥有的成员。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface IDog {\n  eat(food: string);\n  run();\n}\n\ninterface IBird {\n  eat(food: string);\n  fly();\n}\n\nfunction getAnimal(): IDog | IBird {\n// ...\n}\n\nlet ani = getAnimal();\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("// 类型“IBird”上不存在属性“run”")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("if (ani.run) {\n  ani.run();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("// 类型“IDog”上不存在属性“fly”")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("else if (ani.fly) {\n  ani.fly();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("// 为了保证上面的代码不报错，我们只好使用类型断言")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("if ((<IDog>ani).run) {\n  (<IDog>ani).run();\n}\nelse if ((<IBird>ani).fly) {\n  (<IBird>ani).fly();\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("这里可以注意到我们不得不多次使用类型断言。")]),n._v(" "),e("p",[n._v("假如我们一旦检查过类型，就能在之后的每个分支里清楚地知道 "),e("code",[n._v("ani")]),n._v("  的类型的话就好了。")]),n._v(" "),e("p",[n._v("TypeScript 里的   类型保护   机制让它成为了现实。")]),n._v(" "),e("p",[n._v("类型保护就是一些表达式，它们会在运行时检查以确保在某个作用域里的类型。")]),n._v(" "),e("p",[n._v("要定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个   类型谓词：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function isDog(animal: IDog | IBird): animal is IDog {\n  return (<IDog>animal).run !== undefined;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("在这个例子里， "),e("code",[n._v("animal is IDog")]),n._v("  就是类型谓词。")]),n._v(" "),e("p",[n._v("谓词为  "),e("code",[n._v("paramName is Type")]),n._v("  这种形式， "),e("code",[n._v("paramName")]),n._v("  必须是来自于当前函数签名里的一个参数名。")]),n._v(" "),e("p",[n._v("现在每当使用一些变量调用 "),e("code",[n._v("isDog")]),n._v(" 时，TypeScript 会将变量缩减为那个具体的类型，只要这个类型与变量的原始类型是兼容的。")]),n._v(" "),e("p",[n._v("if (isDog(ani)) {\n// TypeScript 已经知道 ani 就是 IDog 类型了\nani.run();\n} else {\n// 这里也能推断出 ani 不是 IDog 类型，\n// 由于 ani 的类型是 IDog | IBird，所以现在它就是 IBird 类型\nani.fly();\n}")]),n._v(" "),e("ul",[e("li",[n._v("typeof  类型保护\n如果要定义一个函数来判断类型是否是原始类型，想象一下，我们要怎么去写？")])]),n._v(" "),e("p",[n._v("function isNumber(x: any): x is number {\nreturn typeof x === 'number';\n}")]),n._v(" "),e("p",[n._v("function isString(x: any): x is string {\nreturn typeof x === 'string';\n}")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function setWidth(style: Record<string, string>, width: string | number) {\n  if (isNumber(width)) {\n    style.width = `${width}px`;\n  }\n  if (isString(width)) {\n    style.width = width;\n  }\n  throw new TypeError(`Expected string or number, got '${width}'.`);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("如果还要再一个个定义其他的原始类型："),e("code",[n._v("boolean")]),n._v(", "),e("code",[n._v("symbol")]),n._v("， 天啊这太痛苦了不是吗？")]),n._v(" "),e("p",[n._v("幸运的是，现在我们不必将  "),e("code",[n._v('typeof x === "number"')]),n._v("  抽象成一个函数，因为 TypeScript 可以将它识别为一个类型保护。")]),n._v(" "),e("p",[n._v("也就是说我们可以直接在代码里检查类型了。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function setWidth(style: Record<string, string>, width: string | number) {\n  if (typeof width === 'number') {\n    style.width = `${width}px`;\n  }\n  if (typeof width === 'string') {\n    style.width = width;\n  }\n  throw new TypeError(`Expected string or number, got '${width}'.`);\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("这些 typeof 类型保护 只有两种形式能被识别： "),e("code",[n._v('typeof v === "typename"')]),n._v("  和  "),e("code",[n._v('typeof v !== "typename"')]),n._v("。")]),n._v(" "),e("p",[e("code",[n._v('"typename"')]),n._v("  必须是   "),e("code",[n._v('"number"')]),n._v(", "),e("code",[n._v('"string"')]),n._v(", "),e("code",[n._v('"boolean"')]),n._v(", "),e("code",[n._v('"symbol"')]),n._v(", "),e("code",[n._v('"bigint"')]),n._v(" 或者 "),e("code",[n._v('"undefined"')]),n._v("。")]),n._v(" "),e("p",[n._v("但是 TypeScript 并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。即 "),e("code",[n._v('"object"')]),n._v(" 与 "),e("code",[n._v('"function"')]),n._v(" 并不会被识别。")]),n._v(" "),e("ul",[e("li",[n._v("instanceof 类型保护\n如果你已经阅读了  typeof 类型保护   并且对 JavaScript 里的  "),e("code",[n._v("instanceof")]),n._v("  操作符熟悉的话，你可能已经猜到了这节要讲的内容。")])]),n._v(" "),e("p",[n._v("instanceof 类型保护是通过构造函数来细化类型的一种方式。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface Padder {\n  getPaddingString(): string\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('class SpaceRepeatingPadder implements Padder {\n  constructor(private numSpaces: number) { }\n  getPaddingString() {\n    return Array(this.numSpaces + 1).join(" ");\n  }\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("class StringPadder implements Padder {\n  constructor(private value: string) { }\n  getPaddingString() {\n   return this.value;\n  }\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function getRandomPadder() {\n  return Math.random() < 0.5 ?\n  new SpaceRepeatingPadder(4) :\n  new StringPadder(" ");\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("p",[n._v("// 类型为 SpaceRepeatingPadder | StringPadder")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let padder: Padder = getRandomPadder();\n\nif (padder instanceof SpaceRepeatingPadder) {\n  padder; // 类型细化为'SpaceRepeatingPadder'\n}\nif (padder instanceof StringPadder) {\n  padder; // 类型细化为'StringPadder'\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[e("code",[n._v("instanceof")]),n._v("  的右侧要求是一个构造函数，TypeScript 将按以下顺序细化为：")]),n._v(" "),e("p",[n._v("此构造函数的  "),e("code",[n._v("prototype")]),n._v("  属性的类型，如果它的类型不为  "),e("code",[n._v("any")]),n._v("  的话\n构造签名所返回的类型的联合")]),n._v(" "),e("ul",[e("li",[n._v("可为空的类型与空值的类型保护")])]),n._v(" "),e("p",[n._v("上面我们讲过，在 TypeScript 中有三种空值类型: "),e("code",[n._v("null")]),n._v(", "),e("code",[n._v("void")]),n._v("(或者"),e("code",[n._v("undefined")]),n._v(") 和 "),e("code",[n._v("never")]),n._v("。")]),n._v(" "),e("p",[n._v("抛开 "),e("code",[n._v("never")]),n._v(" 这个永不返回值或永远不存在的类型，"),e("code",[n._v("null")]),n._v(" 和 "),e("code",[n._v("void")]),n._v(" 也是我们在实际项目中经常要判断去除的数据。")]),n._v(" "),e("p",[n._v("在 TypeScript 中，一个可为空的类型都是通过联合类型实现的，如 "),e("code",[n._v("number | null")]),n._v(", "),e("code",[n._v("string | void")]),n._v(",  "),e("code",[n._v("number | null | undefined")]),n._v("。")]),n._v(" "),e("p",[n._v("而要使用类型保护来去除空值的话，其与在 JavaScript 里写的代码是一致的：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function func(sn: string | null): string {\n  if (sn == null) {\n    return "default";\n  }\n    return sn;\n  }\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("p",[n._v("// 也可以使用短路运算")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function func(sn: string | null): string {\n  return sn || "default";\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("如果某些情况编译器不能够去除  "),e("code",[n._v("null")]),n._v("  或  "),e("code",[n._v("undefined")]),n._v("，你可以使用类型断言手动去除。")]),n._v(" "),e("p",[n._v("语法是添加  "),e("code",[n._v("!")]),n._v("  后缀： "),e("code",[n._v("identifier!")]),n._v("  从  "),e("code",[n._v("identifier")]),n._v("  的类型里去除了  "),e("code",[n._v("null")]),n._v("  和  "),e("code",[n._v("undefined")]),n._v("。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function broken(name: string | null): string {\n  function postfix(epithet: string) {\n    return name.charAt(0) + '. the ' + epithet; // error, 'name' is possibly null\n  }\n  name = name || \"Bob\";\n  return postfix(\"great\");\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function fixed(name: string | null): string {\n  function postfix(epithet: string) {\n    return name!.charAt(0) + \'. the \' + epithet; // ok\n  }\n  name = name || "Bob";\n  return postfix("great");\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("本例使用了嵌套函数，因为编译器无法去除嵌套函数的 "),e("code",[n._v("null")]),n._v("（除非是立即调用的函数表达式）。")]),n._v(" "),e("p",[n._v("因为它无法跟踪所有对嵌套函数的调用，尤其是你将内层函数做为外层函数的返回值。")]),n._v(" "),e("p",[n._v("如果无法知道函数在哪里被调用，就无法知道调用时  "),e("code",[n._v("name")]),n._v("  的类型。")]),n._v(" "),e("h3",{attrs:{id:"映射类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#映射类型"}},[n._v("#")]),n._v(" 映射类型")]),n._v(" "),e("p",[n._v("映射类型就是从旧类型中创建新类型的一种方式。")]),n._v(" "),e("p",[n._v("比如在接口部分中我们有提到可选属性与只读属性，但是那种是对接口中的某个或某几个属性做出的说明。")]),n._v(" "),e("p",[n._v("如果现在需要一个接口，要求它的所有属性都是可选属性，或者所有属性都是只读属性的话，总不能再写一个新的接口，并且把每个属性都加上可选或只读吧？")]),n._v(" "),e("p",[n._v("TypeScript 提供了一些这方面的预置类型："),e("code",[n._v("Partial<T>")]),n._v(", "),e("code",[n._v("Readonly<T>")]),n._v(", "),e("code",[n._v("Pick<T, K extends keyof T>")]),n._v(", "),e("code",[n._v("Record<K extends string, T>")]),n._v("。")]),n._v(" "),e("p",[n._v("它们的实现如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("type Partial<T> = {\n  [P in keyof T]?: T[P];\n}\n\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[p];\n}\n\ntype Pick<T, K extends keyof T> = {\n  [P in K]: T[P];\n}\n\ntype Record<K extends string, T> = {\n  [P in K]: T;\n}\n\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("p",[n._v("在这里，你会看到一些新的内容："),e("code",[n._v("keyof")]),n._v(" 和 索引式的 "),e("code",[n._v("for ... in")]),n._v("。")]),n._v(" "),e("p",[n._v("你可以把 "),e("code",[n._v("keyof")]),n._v(" 类比到 JavaScript 中的 Object.keys ，它是获取接口定义的属性名列表的。")]),n._v(" "),e("p",[n._v("然后再通过 "),e("code",[n._v("in")]),n._v(" 操作符挨个将属性名赋给 P，而后把这个 P 作为新接口的属性。")]),n._v(" "),e("p",[n._v("这四个类型中， "),e("code",[n._v("Partial<T>")]),n._v(", "),e("code",[n._v("Readonly<T>")]),n._v(" 和 "),e("code",[n._v("Pick<T, K extends keyof T>")]),n._v(" 都是同态的。")]),n._v(" "),e("h3",{attrs:{id:"泛型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[n._v("#")]),n._v(" 泛型")]),n._v(" "),e("p",[n._v("你是否发现了上面几个映射类型在写法上有什么特别的？")]),n._v(" "),e("p",[n._v("它们在类型名称后面都有一个尖括号，内部有一个或多个名称。比如 "),e("code",[n._v("Partial<T>")]),n._v(" 中的 "),e("code",[n._v("<T>")]),n._v("。")]),n._v(" "),e("p",[n._v("乍一看似乎和前面讲到的类型断言有点相似，只是一个在前，一个在后。")]),n._v(" "),e("p",[n._v("但它并不是类型断言，而是被叫作   泛型  。")]),n._v(" "),e("p",[n._v("不要从名字上理解，认为泛型与 "),e("code",[n._v("any")]),n._v(" 类似。")]),n._v(" "),e("p",[n._v("泛型不同于 "),e("code",[n._v("any")]),n._v("，你可以认为它是一个未定义的类型别名，是一个函数的形参。")]),n._v(" "),e("p",[n._v("在实际使用时，必须给这个泛型一个明确的类型，可以是单例类型，也可以是交叉、联合类型。")]),n._v(" "),e("p",[n._v("而后 TypeScript 会根据实际使用时的类型，动态的得出最终结果的类型。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("type Exclude<T, U> = T extends U ? never : T\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("ul",[e("li",[n._v("为什么要用泛型？")])]),n._v(" "),e("p",[n._v("从上面的说明中，你应该能了解到，泛型的结果与输入有关，这就相当于一个函数，输入不同，输出也会改变。")]),n._v(" "),e("p",[n._v("有时候我们就是需要根据不同的输入，得到不同的输出类型。这就是泛型的价值。")]),n._v(" "),e("p",[n._v("假设我们有下面这样一个函数，它什么也不做，只是把传入的第一个参数返回。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function returnArg(arg) {\n  return arg;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("这时候，我们要怎么定义它的参数 arg 的类型，以及函数的返回类型？")]),n._v(" "),e("p",[n._v("参数 "),e("code",[n._v("arg")]),n._v(" 可以是任何类型，同样的，返回的 "),e("code",[n._v("arg")]),n._v(" 自然也可以是任何类型。")]),n._v(" "),e("p",[n._v("可是如果我把它们定义为 "),e("code",[n._v("any")]),n._v(" 类型，那样并不能表现出来返回类型与参数类型直接的关系，不论传入什么参数，函数的返回都是 "),e("code",[n._v("any")]),n._v(" 类型。")]),n._v(" "),e("p",[n._v("可事实上，我们知道，如果传入 "),e("code",[n._v("string")]),n._v(" ，它就会返回 "),e("code",[n._v("string")]),n._v("；如果传入 "),e("code",[n._v("number")]),n._v(" ，它也会返回 "),e("code",[n._v("number")]),n._v("。")]),n._v(" "),e("p",[n._v("为此，我可以使用泛型来定义，先给函数声明一个泛型 A【A 仅仅只是一个随便的命名，并非必须要命名为 A】，然后定义参数 "),e("code",[n._v("arg")]),n._v(" 类型为 A。那么函数的返回类型自然也是 A。")]),n._v(" "),e("p",[n._v("此时我们就能发现，函数的参数类型与返回类型有了一个关联，当我传入一个 "),e("code",[n._v("string")]),n._v(" 时，TypeScript 就能知道函数的返回类型也是 "),e("code",[n._v("string")]),n._v("；传入 "),e("code",[n._v("number")]),n._v(" 时，也能知道返回 "),e("code",[n._v("number")]),n._v("。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function returnArg<A>(arg: A): A {\n  return arg;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("ul",[e("li",[n._v("泛型约束")])]),n._v(" "),e("p",[n._v("泛型很灵活，只有在使用时才能知道具体的类型是什么，这似乎有点回到 JavaScript 中的样子。")]),n._v(" "),e("p",[n._v("如果有些地方，我需要使用到泛型，然而我还希望这个泛型是某个类型的子类型时怎么办？")]),n._v(" "),e("p",[n._v("可以通过 "),e("code",[n._v("extends")]),n._v(" 继承来约束泛型。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("interface Lengthwise {\n  length: number;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 使用 extends 约束泛型必须有一个 length 属性且类型为 number\nfunction returnArg<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 泛型约束的默认值\nfunction getProperty<T extends IPerson = IPerson>(obj: T, key: keyof T) {\n  return obj[key];\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("h3",{attrs:{id:"可辨识联合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可辨识联合类型"}},[n._v("#")]),n._v(" 可辨识联合类型")]),n._v(" "),e("p",[n._v("你可以合并单例类型，联合类型，类型保护和类型别名来创建一个叫做   可辨识联合的高级模式，它也称做   标签联合或   代数数据类型。")]),n._v(" "),e("p",[n._v("可辨识联合在函数式编程很有用处。 一些语言会自动地为你辨识联合；而 TypeScript 则基于已有的 JavaScript 模式。")]),n._v(" "),e("p",[n._v("它具有 3 个要素：")]),n._v(" "),e("p",[n._v("具有普通的单例类型属性—  可辨识的特征。\n一个类型别名包含了那些类型的联合—  联合。\n此属性上的类型保护。\n// 首先我们声明将要联合的接口。\n// 每个接口都有 kind 属性但有不同的字符串字面量类型。\n// kind 属性称做 可辨识的特征 或 标签。\n// 其它的属性则特定于各个接口。")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('interface Square {\n  kind: "square";\n  size: number;\n}\ninterface Rectangle {\n  kind: "rectangle";\n  width: number;\n  height: number;\n}\ninterface Circle {\n  kind: "circle";\n  radius: number;\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("p",[n._v("// 注意，目前各个接口间是没有联系的。")]),n._v(" "),e("p",[n._v("// 下面我们把它们联合到一起：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("type Shape = Square | Rectangle | Circle;\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("// 现在我们使用可辨识联合")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('function area(s: Shape) {\n  switch (s.kind) {\n    case "square": return s.size * s.size;\n    case "rectangle": return s.height * s.width;\n    case "circle": return Math.PI * s.radius ** 2;\n  }\n}\n\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("从上面的示例中，我们来总结一下：")]),n._v(" "),e("p",[n._v("所谓   可辨识联合   就是多个具有相同单例属性名称但有不同字面量的类型，联合成一个类型，然后根据这个单例属性【即   可辨识特征  】的不同字面量来推断出它的具体类型【类型保护】。")]),n._v(" "),e("h2",{attrs:{id:"结语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[n._v("#")]),n._v(" 结语")]),n._v(" "),e("p",[n._v("以上就是本文档的全部内容了，但是也只是简单介绍了一些我们项目中常用的以及实际工作中比较实用的内容；TypeScript 官方文档还有更多东西没有介绍，比如命名空间、模块、声明合并、混入等。")]),n._v(" "),e("p",[n._v("如果你对此感兴趣，想进一步了解的话，建议移步 TypeScript 官方文档查看更多。")]),n._v(" "),e("p",[n._v("那么假如本篇文档有帮助到你的话，我很高兴能写下它。")])],1)}),[],!1,null,null,null);s.default=t.exports}}]);